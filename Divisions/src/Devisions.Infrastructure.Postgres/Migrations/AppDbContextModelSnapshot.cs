// <auto-generated />
using System;
using Devisions.Infrastructure.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Devisions.Infrastructure.Postgres.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Devisions.Domain.Department.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<short>("Depth")
                        .HasColumnType("smallint")
                        .HasColumnName("depth");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("parent_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("parent_id");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("Devisions.Domain.Department.DepartmentLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<Guid>("department_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("department_id");

                    b.ToTable("department_locations", (string)null);
                });

            modelBuilder.Entity("Devisions.Domain.Department.DepartmentPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.Property<Guid>("department_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("department_id");

                    b.ToTable("department_positions", (string)null);
                });

            modelBuilder.Entity("Devisions.Domain.Location.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("Devisions.Domain.Position.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("positions", (string)null);
                });

            modelBuilder.Entity("Devisions.Domain.Department.Department", b =>
                {
                    b.HasOne("Devisions.Domain.Department.Department", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("parent_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("Devisions.Domain.Department.Identifier", "Identifier", b1 =>
                        {
                            b1.Property<Guid>("DepartmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Identify")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("identify");

                            b1.HasKey("DepartmentId");

                            b1.ToTable("departments");

                            b1.WithOwner()
                                .HasForeignKey("DepartmentId");
                        });

                    b.Navigation("Identifier")
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Devisions.Domain.Department.DepartmentLocation", b =>
                {
                    b.HasOne("Devisions.Domain.Location.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Devisions.Domain.Department.Department", "Department")
                        .WithMany("DepartmentLocations")
                        .HasForeignKey("department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Devisions.Domain.Department.DepartmentPosition", b =>
                {
                    b.HasOne("Devisions.Domain.Position.Position", null)
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Devisions.Domain.Department.Department", "Department")
                        .WithMany("DepartmentPositions")
                        .HasForeignKey("department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Devisions.Domain.Location.Location", b =>
                {
                    b.OwnsOne("Devisions.Domain.Location.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)")
                                .HasColumnName("city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)")
                                .HasColumnName("country");

                            b1.Property<int>("HouseNumber")
                                .HasMaxLength(5)
                                .HasColumnType("integer")
                                .HasColumnName("houseNumber");

                            b1.Property<int?>("RoomNumber")
                                .HasMaxLength(5)
                                .HasColumnType("integer")
                                .HasColumnName("roomNumber");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)")
                                .HasColumnName("street");

                            b1.HasKey("LocationId");

                            b1.HasIndex("Country", "City", "Street", "HouseNumber", "RoomNumber")
                                .IsUnique()
                                .HasDatabaseName("address_unique");

                            b1.ToTable("locations");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.OwnsOne("Devisions.Domain.Location.Timezone", "Timezone", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("IanaTimeZone")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("timezone");

                            b1.HasKey("LocationId");

                            b1.ToTable("locations");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Timezone")
                        .IsRequired();
                });

            modelBuilder.Entity("Devisions.Domain.Department.Department", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("DepartmentLocations");

                    b.Navigation("DepartmentPositions");
                });
#pragma warning restore 612, 618
        }
    }
}
